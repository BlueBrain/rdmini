# global flags

# Should we build our local copy of libyaml.a?

BUILD_YAML := 1

# compiler: gnu, pgi, cray, or clang
# (some compiler options depend on this variable.)

COMPILER := gnu

.PHONY: clean all realclean test bench depend doc
.SECONDARY:

# main targets

demos := demo_parse demo_ssa_direct demo_sim demo_timer_test
tests := test_dummy test_modelspec test_modelspec_yaml test_ssaapi test_check_valid
benches := 
hakyll_site := ./site

# output directories

docdir := www
testxmldir := test-xml

all: $(demos) $(tests) $(benches) doc

# source directories

top=..
GTEST_DIR=$(top)/gtest-1.7.0
YAML_DIR=$(top)/yaml-0.1.6
VPATH = $(top)

# compiler flags

OPTFLAGS = -O3
#OPTFLAGS = -g -O0

# compiler-specific flags: note that in
# some environments, make depend must be
# performed explicitly

ifeq "$(COMPILER)" "gnu"
# gcc, g++
CC = gcc
CXX = g++
CFLAGS = $(OPTFLAGS)
CXXFLAGS = -std=c++11 $(OPTFLAGS) -fopenmp
CXXFLAGS += -MMD -MP  # auto-generate dependencies
LDFLAGS += -fopenmp
else ifeq "$(COMPILER)" "clang"
# clang, clang++
CC = clang
CXX = clang++
CFLAGS = $(OPTFLAGS)
CXXFLAGS = -std=c++11 $(OPTFLAGS) -fopenmp -Wno-logical-op-parentheses
CXXFLAGS += -MMD -MP  # auto-generate dependencies
LDFLAGS += -fopenmp
# pgc, pgc++
else ifeq "$(COMPILER)" "pgi"
CC = pgcc
CXX = pgc++
CXXFLAGS = -std=c++11 $(OPTFLAGS) -mp
LDFLAGS += -mp -lpthread
MAKEDEPEND := 1 # dependency generation doesn't handle directory in -o
else ifeq "$(COMPILER)" "cray"
CC = cc
CXX = CC
CXXFLAGS = -h std=c++11 $(OPTFLAGS) -h omp
MAKEDEPEND := 1 # no useful autodependency generation
else
CC = __error__
CXX = __error__
endif

CPPFLAGS += -I$(top)

# need to make libyaml ourselves?

ifdef BUILD_YAML
CPPFLAGS += -I $(YAML_DIR)/include
LDFLAGS += libyaml.a
yaml_lib = libyaml.a

obj/yaml/%.o: $(YAML_DIR)/src/%.c
	$(CC) -c -o $@ $(CPPFLAGS) -DHAVE_CONFIG_H -I$(YAML_DIR)/src $(CFLAGS) $<

libyaml.a: $(patsubst %.c,obj/yaml/%.o,$(notdir $(wildcard $(YAML_DIR)/src/*.c)))
	$(AR) $(ARFLAGS) $@ $^

else
yaml_lib =
endif

# rdmini core routines

rdmini_sources := $(wildcard $(top)/rdmini/*.cc)
rdmini_objects := $(patsubst %.cc,obj/%.o,$(notdir $(rdmini_sources)))

obj/%.o: rdmini/%.cc
	$(CXX) -c -o $@ $(CPPFLAGS) $(CXXFLAGS) $<


# demo apps link with rdmini object files

demo_sources := $(wildcard $(top)/demo/demo_*.cc)

demo_%: obj/demo_%.o $(rdmini_objects) $(yaml_lib)
	$(CXX) -o $@ $(LDFLAGS) $^ $(LOADLIBES) $(LDLIBS)

obj/demo_%.o: demo/demo_%.cc
	$(CXX) -c -o $@ $(CPPFLAGS) $(CXXFLAGS) $<


# tests link with rdmini object files and libgtestmain

GTEST_CPPFLAGS=-isystem $(GTEST_DIR)/include

test_sources := $(wildcard $(top)/test/test_*.cc)
test_executables := $(patsubst %.cc,%,$(notdir $(test_sources)))

test_%: obj/test_%.o $(rdmini_objects) $(yaml_lib) libgtestmain.a
	$(CXX) -o $@ $(LDFLAGS) $^ $(LOADLIBES) $(LDLIBS)

obj/test_%.o: test/test_%.cc
	$(CXX) -c -o $@ $(CPPFLAGS) $(GTEST_CPPFLAGS) $(CXXFLAGS) $<


# build libgtestmain.a

GTEST_HEADERS=$(GTEST_DIR)/include/gtest/*.h $(GTEST_DIR)/include/gtest/internal/*.h
GTEST_SOURCES=$(GTEST_DIR)/src/*.cc $(GTEST_DIR)/src/*.h $(GTEST_HEADERS)

GTEST_CPPFLAGS=-I$(GTEST_DIR) -I$(GTEST_DIR)/include -DGTEST_HAS_PTHREAD=0

obj/gtest-all.o: $(GTEST_SOURCES)
	$(CXX) $(CXXFLAGS) $(CPPFLAGS) $(GTEST_CPPFLAGS) -o $@ -c $(GTEST_DIR)/src/gtest-all.cc

obj/gtest_main.o: $(GTEST_SOURCES)
	$(CXX) $(CXXFLAGS) $(CPPFLAGS) $(GTEST_CPPFLAGS) -o $@ -c $(GTEST_DIR)/src/gtest_main.cc

libgtestmain.a: obj/gtest-all.o obj/gtest_main.o
	$(AR) $(ARFLAGS) $@ $^


# build docs with Hakyll site generator

$(hakyll_site): $(top)/doc/src/site.hs
	ghc -hidir obj -odir obj -o $@ --make $<

csl-stylesheet = $(top)/doc/style.csl

style.csl: $(csl-stylesheet)
	cp $< $@

doc: $(hakyll_site) style.csl
	$(hakyll_site) rebuild -v -d $(docdir) $(top)/doc
	
# write docs to (local) gh-pages branch

gh-pages: doc
	$(top)/scripts/commit-dir -v gh-pages $(docdir)

# publish gh-pages branch to subdirectory of remote repository

publish-doc: gh-pages

# dependencies

all_nonlib_sources := $(rdmini_sources) $(demo_sources) $(test_sources)

ifdef MAKEDEPEND  # manual
depend:
	touch obj/_all.d
	makedepend -pobj/ -- $(CPPFLAGS) -- -fobj/_all.d $(all_nonlib_sources) 2>&1 |\
	     sed -e '/warning.*cannot find include/d' -e '/	not in/d' 1>&2
	sed 's/^[^:]*\/\([^:]*:\)/obj\/\1/' < obj/_all.d > obj/all.d
	
-include obj/all.d
else
-include $(patsubst %.cc,obj/%.d,$(notdir $(all_nonlib_sources))) # autogenerated
endif

# clean

clean:
	rm -f gtest-all.o gtest_main.o obj/*.o obj/*.hi obj/yaml/*.o obj/*.d.bak style.csl

realclean: clean
	rm -f $(demos) $(tests) $(benches) $(hakyll_site) libgtestmain.a libyaml.a obj/*.d obj/yaml/*.d 
	rm -rf $(docdir) _cache style.csl

# run tests

test: $(test_executables)
	rm -rf $(testxmldir)
	for file in $(tests); do ./$$file --gtest_output="xml:$(testxmldir)/"; done
